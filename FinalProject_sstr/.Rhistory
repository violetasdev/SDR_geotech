(scores[,])*sparseMX@x[1:4633]
scores[,]
scores
max(scores - prev_scores)
max(prev_scores-scores)
err = abs(max(prev_scores-scores)) / scores_max
err
#With compression
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
nozero=which(sumRowS!=0)
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
scores - prev_scores
class(scores)
scores
class(prev_scores)
dim(prev_scores)
matrix(scores,nrow =4633)  - prev_scores
sparseMX@x[1:4633]
scores[,]
scores= matrix(1,nrow=n)/n
(scores)*sparseMX@x[1:4633]
(scores)*sparseMX@x[1:4633] + (t(dangleM)%*%(prev_scores))
(scores)*sparseMX@x[1:4633]
(t(dangleM)%*%(prev_scores))
(matrix((scores)*sparseMX@x[1:4633],nrow=4633) + (t(dangleM)%*%(prev_scores))
)
(scores[,])*sparseMX@x[1:4633]
(scores[,])*sparseMX@x[1:4633] + (t(dangleM)%*%(prev_scores))
prev_scores = scores
initial_guess=1/n
scores= matrix(1,nrow=n)/n
dim(scores)
dangleM=matrix(dangle,nrow = n)
dim(dangleM)
for (i in seq(1,max_iter, by=1)){
print(i)
prev_scores = scores
scores = (alpha * ((scores[,])*sparseMX@x[1:4633] + (t(dangleM)%*%(prev_scores)))+ (1 - alpha) * sum(prev_scores) / n)
scores_max =max(abs(scores))
if (scores_max == 0.0){
scores_max = 1.0
}
err = abs(max(matrix(scores,nrow =4633)  - prev_scores)) / scores_max
if (err < n * tol){
print("nada")
}
length(scores)
scores
}
err
n * tol
length(scores)
scores
(system.file("data/foo.csv", package = "sstr")
)
(system.file("data/foo.csv", package = "sstr"))
data.matrix(read_csv((system.file("data/foo.csv", package = "sstr"))))
dataset <- data.matrix(read_csv((system.file("extdata/foo.csv", package = "sstr"))))
dataset <- data.matrix(read_csv((system.file("inst/extdata/foo.csv", package = "sstr"))))
dataset <- data.matrix(read_csv((system.file("inst/extdata/foo.csv", package = "sstr"))))
(system.file("inst/extdata/foo.csv", package = "sstr"))
dataset <- read.csv(system.file("extdata/foo.csv", package = "sstr"))
dataset
library(sstr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
library(readr)
#'
#' @param path similarity matrix file
#' @param sketch_map_size size of input graph
#' @param scoressm calculated affinity scores for the similarity matrix
#' @return list object containing highest affinity candidate pairs for two input graphs
#' @importFrom Matrix nnzero
#' @importFrom readr read_csv
#' @importFrom SparseM as.matrix.csr
#' @export
#'
?simat
path<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
sketch_map_size=41
scoressm <- data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/scores2.csv"))
#create storage lists
sm_feat_list = c()
mm_feat_list = c()
start_time=start()
#Sparse the Matrix by row
sm_sparse=as.matrix.csr(path)
metric_map_size=metricm_size(sm_sparse,sketch_map_size)
#Main analysis objects
L=construct_l(sm_sparse)
X=construct_x(sm_sparse)
#Fetch the compatible ones
while(max(scoressm)>0 & nnzero(L)!=0){
maxind=maxScoreIndx(scoressm)
sm_feat_id=round((maxind/metric_map_size),0)
sm_feat_list=append(sm_feat_list,sm_feat_id)
mm_feat_id=maxind%%metric_map_size
mm_feat_list=append(mm_feat_list,mm_feat_id)
scoressm[maxind,]=-1
L[maxind,]=0
for (i in seq(0,ncol(sm_sparse), by=1)){
if(round(i/metric_map_size,0)==sm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
if(i%%metric_map_size==mm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
}
X[maxind,]=1
}
results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
results
dataset <- read.csv(system.file("extdata/foo.csv", package = "sstr"))
path<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
sketch_map_size=41
scoressm <- data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/scores2.csv"))
#create storage lists
sm_feat_list = c()
mm_feat_list = c()
start_time=start()
#Sparse the Matrix by row
sm_sparse=as.matrix.csr(path)
metric_map_size=metricm_size(sm_sparse,sketch_map_size)
#Main analysis objects
L=construct_l(sm_sparse)
X=construct_x(sm_sparse)
#Fetch the compatible ones
while(max(scoressm)>0 & nnzero(L)!=0){
maxind=maxScoreIndx(scoressm)
sm_feat_id=round((maxind/metric_map_size),0)
sm_feat_list=append(sm_feat_list,sm_feat_id)
mm_feat_id=maxind%%metric_map_size
mm_feat_list=append(mm_feat_list,mm_feat_id)
scoressm[maxind,]=-1
L[maxind,]=0
for (i in seq(0,ncol(sm_sparse), by=1)){
if(round(i/metric_map_size,0)==sm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
if(i%%metric_map_size==mm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
}
X[maxind,]=1
}
results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
results
return(results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time)))
results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
results
start_time
end.time
Sys.time()
end.time <- Sys.time()
time.takenG <- end.time - sttime.time
time.takenG <- end.time - sttime
end<-function(sttime){
end.time <- Sys.time()
time.takenG <- end.time - sttime
return(time.takenG)
}
end.time <- Sys.time()
time.takenG <- end.time - sttime
sttime
start.time <- Sys.time()
start.time <- Sys.time()
start.time
start()
start_time
results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
results
results=simat(dataset,smap_size,scoressm)
simat(dataset,smap_size,scoressm)
?simat
results=simat(dataset,smap_size,scoressm)
results=simat(path=dataset,smap_size=sketch_map_size,scoressm=scoressm)
results=simat(path=dataset,smap_size=sketch_map_size,scoressm=scoressm)
library(sstr)
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoressm <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
smap_size=41
scoreSimMa <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
results=simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
library(sstr)
library(sstr)
results
results=simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
results
results<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
results
results
results<-r_sstr("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
results<-r_sstr(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
results<-r_sstr(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
path <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
sketch_map_size=41
scoressm <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
#create storage lists
sm_feat_list = c()
mm_feat_list = c()
start_time=start()
#Sparse the Matrix by row
sm_sparse=as.matrix.csr(path)
metric_map_size=metricm_size(sm_sparse,sketch_map_size)
#Main analysis objects
L=construct_l(sm_sparse)
X=construct_x(sm_sparse)
#Fetch the compatible ones
while(max(scoressm)>0 & nnzero(L)!=0){
maxind=maxScoreIndx(scoressm)
sm_feat_id=round((maxind/metric_map_size),0)
sm_feat_list=append(sm_feat_list,sm_feat_id)
mm_feat_id=maxind%%metric_map_size
mm_feat_list=append(mm_feat_list,mm_feat_id)
scoressm[maxind,]=-1
L[maxind,]=0
for (i in seq(0,ncol(sm_sparse), by=1)){
if(round(i/metric_map_size,0)==sm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
if(i%%metric_map_size==mm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
}
X[maxind,]=1
}
results<-r_sstr(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
results
library(sstr)
?start
class(time.takenG)
start.time <- Sys.time()
end.time <- Sys.time()
time.takenG <- end.time - start.time
class(time.takenG)
(sort(sm_feat_list))
class(sm_feat_list)
library(sstr)
library(sstr)
#' @param path similarity matrix of class matrix
#' @param sketch_map_size size of input graph of class numeric
#' @param scoressm calculated affinity scores for the similarity matrix
#' @return list object containing highest affinity candidate pairs for two input graphs
#' @importFrom Matrix nnzero
#' @importFrom readr read_csv
#' @importFrom SparseM as.matrix.csr
#' @importFrom methods setclass
#' @export
#'
?setClass
library(sstr)
library(sstr)
results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
(simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
library(sstr)
results=0
results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
library(sstr)
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoreSimMa <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
smap_size=41
results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
results<-simat(dataset,smap_size,scoreSimMa)
results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
?simat
?simat
results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
results
library(sstr)
results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
results
constructClass<-function(){
r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
return(r_sstr)
}
results<-constructClass()
r_sstr
r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
r_sstr
results<-constructClass()
results
result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
results<-constructClass()
library(sstr)
library(sstr)
library(sstr)
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoreSimMa <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
smap_size=41
result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
results
_object_sstr
result_object_sstr
result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa)
library(sstr)
library(sstr)
init<-start()
finish<-end(init)
(finish<-end(init))
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoreSimMa <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
sk_map_size=41
(result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
constructClass<-function(){
assign('r_sstr', r_sstr, envir = .GlobalEnv)
r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
return(r_sstr)
}
results<-constructClass()
results<-r_sstr(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
results<-constructClass()
#create storage lists
sm_feat_list = c()
mm_feat_list = c()
start_time=start()
#Sparse the Matrix by row
sm_sparse=as.matrix.csr(path)
metric_map_size=metricm_size(sm_sparse,sketch_map_size)
#Main analysis objects
L=construct_l(sm_sparse)
X=construct_x(sm_sparse)
#Fetch the compatible ones
while(max(scoressm)>0 & nnzero(L)!=0){
maxind=maxScoreIndx(scoressm)
sm_feat_id=round((maxind/metric_map_size),0)
sm_feat_list=append(sm_feat_list,sm_feat_id)
mm_feat_id=maxind%%metric_map_size
mm_feat_list=append(mm_feat_list,mm_feat_id)
scoressm[maxind,]=-1
L[maxind,]=0
for (i in seq(0,ncol(sm_sparse), by=1)){
if(round(i/metric_map_size,0)==sm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
if(i%%metric_map_size==mm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
}
X[maxind,]=1
}
scoressm <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoressm <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
sketch_map_size=41
(results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
library(sstr)
setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
library(sstr)
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoreSimMa <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
scoreSimMa <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
smap_size=41
(simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
(simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
rsstr=setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
r_sstr=setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
(simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
(simat(dataset,smap_size,scoreSimMa))
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoressm <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
sketch_map_size=41
r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
assign('r_sstr', r_sstr, envir = .GlobalEnv)
r_sstr
(results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
?assign
r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
results<-cbind(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
results
results<-cbind("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, time=end(start_time))
results
return(results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time)))
results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
results
library(sstr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoressm <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
sketch_map_size=41
(results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
simat<-function(path,sketch_map_size,scoressm){
results<-constructClass()
#create storage lists
sm_feat_list = c()
mm_feat_list = c()
start_time=start()
#Sparse the Matrix by row
sm_sparse=as.matrix.csr(path)
metric_map_size=metricm_size(sm_sparse,sketch_map_size)
#Main analysis objects
L=construct_l(sm_sparse)
X=construct_x(sm_sparse)
#Fetch the compatible ones
while(max(scoressm)>0 & nnzero(L)!=0){
maxind=maxScoreIndx(scoressm)
sm_feat_id=round((maxind/metric_map_size),0)
sm_feat_list=append(sm_feat_list,sm_feat_id)
mm_feat_id=maxind%%metric_map_size
mm_feat_list=append(mm_feat_list,mm_feat_id)
scoressm[maxind,]=-1
L[maxind,]=0
for (i in seq(0,ncol(sm_sparse), by=1)){
if(round(i/metric_map_size,0)==sm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
if(i%%metric_map_size==mm_feat_id){
L[i,]=0
scoressm[i,]=-1
}
}
X[maxind,]=1
}
#results<-r_sstr(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
return(results)
}
maxScoreIndx<-function(scorematrix){
maxScore=max(scorematrix)
maxind=(which(scorematrix == maxScore, arr.ind = TRUE))[1][1]
return(maxind)
}
metricm_size<-function(sm_sparse,sketch_map_size){
m_map_size=(nrow(sm_sparse)/sketch_map_size)
return(m_map_size)
}
construct_l<-function(sm_sparse){
return(matrix(1,nrow=nrow(sm_sparse),ncol = ncol(sm_sparse)))
}
construct_x<-function(sm_sparse){
return(matrix(0,nrow=nrow(sm_sparse),ncol = ncol(sm_sparse)))
}
(results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
results<-list("sketch_map_indexes"=sm_feat_list, "metric_map_indexes"=mm_feat_list, "time"=end(start_time))
results
(results<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
library(sstr)
(result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
?metricm_size
library(sstr)
(resulted_matrix<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
library(sstr)
library(sstr)
library(sstr)
scoreSimMa<- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
smap_size=41
(resulted_matrix<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
library(sstr)
library(sstr)
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoreSimMa<- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
smap_size=41
(resulted_matrix<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
structure(list(ski, mmi,t), class = "sst_r") %>%
setNames(nm = c("sketch_map_indexes","metric_map_indexes","time"))
structure(list(ski, mmi,t), class = "sst_r")
k<-structure(list(1,3,2), class = "sst_r")
k
k<-structure(list("sketch_map_indexes"=smi, "metric_map_indexes"=mmi, "time"=t), class = "sst_r")
r_sstr<-structure(list("sketch_map_indexes"=smi, "metric_map_indexes"=mmi, "time"=t), class = "sst_r")
results<-contructClass(sm_feat_list,mm_feat_list,end(start_time))
results<-constructClass(sm_feat_list,mm_feat_list,end(start_time))
results<-constructClass(sm_feat_list,mm_feat_list,end(start_time))
constructClass<-function(ski,mmi,t){
r_sstr<-structure(list("sketch_map_indexes"=smi, "metric_map_indexes"=mmi, "time"=t), class = "sst_r")
#r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
return(r_sstr)
}
results<-constructClass(sm_feat_list,mm_feat_list,end(start_time))
#results<-r_sstr(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
?contructClass
#results<-r_sstr(sketch_map_indexes=sm_feat_list, metric_map_indexes=mm_feat_list, time=end(start_time))
?constructClass
results<-constructClass(smi=sm_feat_list,mmi=mm_feat_list,t=end(start_time))
constructClass<-function(smi,mmi,t){
r_sstr<-structure(list("sketch_map_indexes"=smi, "metric_map_indexes"=mmi, "time"=t), class = "sst_r")
#r_sstr<-setClass("sstr", slots=c("sketch_map_indexes","metric_map_indexes","time"))
return(r_sstr)
}
results<-constructClass(smi=sm_feat_list,mmi=mm_feat_list,t=end(start_time))
results
library(sstr)
library(sstr)
library(sstr)
library(sstr)
library(sstr)
library(sstr)
library(sstr)
library(sstr)
library(sstr)
