maxscorelist=c()
while(max(scores2nd)>0 & nnzero(L)!=0){
cnt=cnt+1
#The difference is only the complexity?
#For nlargest O(nlogk)
#For max (assuming is ordering method) 0(nlogn)
(max5=max(scores2nd))
#maxscorelist=append(maxscorelist,max(scores2nd))
#maxlist=append(maxlist,max5)
(maxind=(which(scores2nd == max5, arr.ind = TRUE))[1][1])
#maxindlist=append(maxindlist,maxind)
(sm_feat_id=round((maxind/metric_map_size),0))
(sm_feat_list=append(sm_feat_list,sm_feat_id))
(mm_feat_id=maxind%%metric_map_size)
(mm_feat_list=append(mm_feat_list,mm_feat_id))
scores2nd[maxind,]=-1
L[maxind,]=0
for (i in seq(0,ncol(ddarr2), by=1)){
if(round(i/metric_map_size,0)==sm_feat_id){
L[i,]=0
scores2nd[i,]=-1
}
if(i%%metric_map_size==mm_feat_id){
L[i,]=0
scores2nd[i,]=-1
}
}
X[maxind,]=1
}
end.time <- Sys.time()
time.takenG <- end.time - start.time
time.takenG
(maxlist)
(maxindlist)
(maxscorelist)
(sort(sm_feat_list))
(sort(mm_feat_list))
scores2nd
scores2nd <- data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/scores2.csv"))
scores2nd
X<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
Xcsr<-as.matrix.csr(X)
#X@ra real numbers
#X@ja column indices of ra
#X@ia indicates position in ra and ja where i row begins
Xcsr
Xcsr@ra[Xcsr@ja[1]:Xcsr@ia[1]]
Xcsr@ra[1:10]
#Set up variables
alpha=0.85
max_iter=100
tol=1e-10
n=ncol(X)
#Without compression
(incoming_counts0=rowSums(X))
incoming_counts=which(incoming_counts0=0)
#Without compression
(incoming_counts0=rowSums(X))
incoming_counts=which(incoming_counts0==0)
incoming_counts
incoming_counts=which(incoming_counts0!=0)
(incoming_counts=which(incoming_counts0!=0))
#Without compression
(incoming_counts0=rowSums(X))
(incoming_counts=which(incoming_counts0!=0))
#Without compression
(incoming_counts0=rowSums(X))
X<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
Xcsr<-as.matrix.csr(X)
n=ncol(X)
(n=ncol(X))
#Without compression
(incoming_counts0=rowSums(X))
#Without compression
(incoming_counts0=rowSums(X))
#Without compression
(incoming_counts0=colSums(X))
(incoming_counts=which(incoming_counts0!=0))
#Without compression
(incoming_counts0=rowSums(X))
(incoming_counts=which(incoming_counts0!=0))
Xcsr<-as.matrix.csr(X)
Xcsr
#Without compression
(incoming_counts0=rowSums(Xcsr))
Xcsr@ja[1]
Xcsr@ia[1]
Xcsr@ra[1:10]
Xcsr@ra[1,]
Xcsr@ra
X<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
#Similarity Matrix - Must be sparse
library(SparseM)
library(readr)
X<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
Xcsr<-as.matrix.csr(X)
#X@ra real numbers
#X@ja column indices of ra
#X@ia indicates position in ra and ja where i row begins
Xcsr
Xcsr@ra
#Without compression
(incoming_counts0=rowSums(Xcsr))
#Without compression
(incoming_counts0=rowSums(Xcsr@ra))
Xcsr<-as.matrix.csr(X)
#X@ra real numbers
#X@ja column indices of ra
#X@ia indicates position in ra and ja where i row begins
Xcsr
#Without compression
(incoming_counts0=rowSums(X))
(incoming_counts=which(incoming_counts0!=0))
#Xcsr@ra[Xcsr@ja[106]:Xcsr@ia[106+1]]
#encontrar donde no es cero, multiplicarlo por 1/elvalornozero
for(i in incoming_counts){
(Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]=Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]*(1/incoming_counts[i]))
}
Xcsr@ra[Xcsr@ja[1]:Xcsr@ia[2]]
Xcsr@ra[Xcsr@ja[0]:Xcsr@ia[1]]
Xcsr@ra
(incoming_counts=which(incoming_counts0!=0))
Xcsr@ra[0:1]
Xcsr@ra[1:2]
Xcsr@ra[960:961]
Xcsr@ra
incoming_counts[0]
incoming_counts[0,]
incoming_counts[0]
incoming_counts
incoming_counts[,1]
incoming_counts[1]
incoming_counts[2]
Xcsr@ra
(ifelse(a>3,a-b,a+b))
a=10
b=3
(ifelse(a>3,a-b,a+b))
b=30
(ifelse(a>3,a-b,a+b))
#Without compression
(incoming_counts0=rowSums(Xcsr@ra))
#Without compression
(incoming_counts0=rowSums(Xcsr))
(incoming_counts=which(incoming_counts0!=0))
#Without compression
(incoming_counts0=rowSums(Xcsr))
#X@ra real numbers
#X@ja column indices of ra
#X@ia indicates position in ra and ja where i row begins
Xcsr
#Without compression
(incoming_counts0=rowSums(X))
(incoming_counts=which(incoming_counts0!=0))
X[1:1+1]
X<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
Xcsr<-as.matrix.csr(X)
#X@ra real numbers
#X@ja column indices of ra
#X@ia indicates position in ra and ja where i row begins
Xcsr
#Set up variables
alpha=0.85
max_iter=100
tol=1e-10
(n=ncol(X))
#Without compression
(incoming_counts0=rowSums(X))
(incoming_counts=which(incoming_counts0!=0))
#Xcsr@ra[Xcsr@ja[106]:Xcsr@ia[106+1]]
#encontrar donde no es cero, multiplicarlo por 1/elvalornozero
for(i in incoming_counts){
#(Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]=Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]*(1/incoming_counts[i]))
(X[i:i+1]=X[i:i+1]*(1/incoming_counts[i]))
dangle=ifelse(which(incoming_counts0==0),1.0/n,0)
}
(dangle)
#Xcsr@ra[Xcsr@ja[106]:Xcsr@ia[106+1]]
#encontrar donde no es cero, multiplicarlo por 1/elvalornozero
for(i in incoming_counts){
#(Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]=Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]*(1/incoming_counts[i]))
(X[i:i+1]=X[i:i+1]*(1/incoming_counts[i]))
dangle=which(ifelse(incoming_counts0==0),1.0/n,0)
}
#Xcsr@ra[Xcsr@ja[106]:Xcsr@ia[106+1]]
#encontrar donde no es cero, multiplicarlo por 1/elvalornozero
for(i in incoming_counts){
#(Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]=Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]*(1/incoming_counts[i]))
(X[i:i+1]=X[i:i+1]*(1/incoming_counts[i]))
dangle=which(ifelse(incoming_counts0==0,1.0/n,0))
}
#Xcsr@ra[Xcsr@ja[106]:Xcsr@ia[106+1]]
#encontrar donde no es cero, multiplicarlo por 1/elvalornozero
for(i in incoming_counts){
#(Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]=Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]*(1/incoming_counts[i]))
(X[i:i+1]=X[i:i+1]*(1/incoming_counts[i]))
dangle=which(ifelse(incoming_counts0==0,1.0/n,0),arr.ind = TRUE)
}
#Xcsr@ra[Xcsr@ja[106]:Xcsr@ia[106+1]]
#encontrar donde no es cero, multiplicarlo por 1/elvalornozero
for(i in incoming_counts){
#(Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]=Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]*(1/incoming_counts[i]))
(X[i:i+1]=X[i:i+1]*(1/incoming_counts[i]))
dangle=which(incoming_counts0==0,1.0/n,0)
}
(dangle)
#Xcsr@ra[Xcsr@ja[106]:Xcsr@ia[106+1]]
#encontrar donde no es cero, multiplicarlo por 1/elvalornozero
for(i in incoming_counts){
#(Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]=Xcsr@ra[Xcsr@ja[i]:Xcsr@ia[i+1]]*(1/incoming_counts[i]))
(X[i:i+1]=X[i:i+1]*(1/incoming_counts[i]))
dangle=which(rowSums(X)==0,1.0/n,0)
}
#Similarity Matrix - Must be translated into a sparseMatrix, because it is to heavy to handle
library(SparseM)
library(readr)
library('Matrix')
X<- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
alpha=0.85,max_iter=200,tol=1e-10
alpha=0.85
max_iter=200
tol=1e-10
n=ncol(X)
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
#Similarity Matrix - Must be translated into a sparseMatrix, because it is to heavy to handle
library(SparseM)
library('Matrix')
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
library(textTinyR)
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
nozero=which(sumRowS!=0)
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
initial_guess=1/n
scores= matrix(1,nrow=n)/n
#dim(scores)
dangleM=matrix(dangle,nrow = n)
dim(dangleM)
print(i)
i=0
i=1
print(i)
prev_scores = scores
for (i in seq(1,max_iter, by=1)){
print(i)
prev_scores = scores
#Here we have the detail, we are calling the sparseMatrix data nxn
#We need all to be numeric
scores = (alpha * ((scores[,])*sparseMX@x[1:4633] + (t(dangleM)%*%(prev_scores)))+ (1 - alpha) * sum(prev_scores) / n)
scores_max =max(abs(scores))
if (scores_max == 0.0){
scores_max = 1.0
}
err = abs(max(matrix(scores,nrow =4633)  - prev_scores)) / scores_max
if (err < n * tol){
(scores)
}
}
scores
matrix(scores)
prev_scores
prev_scores = scores
scores
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
i
i=0
nozero=which(sumRowS!=0)
nozero
k
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
nozero
i
n=ncol(X)
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
nozero=which(sumRowS!=0)
#Identify dangle scoring
i=0
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
sparseMX
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
#Similarity Matrix - Must be translated into a sparseMatrix, because it is to heavy to handle
library(SparseM)
library(readr)
library('Matrix')
library(textTinyR)
X<- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
alpha=0.85
max_iter=200
tol=1e-10
n=ncol(X)
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
nozero=which(sumRowS!=0)
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
i
sparseMX@x[1,]
sparseMX@x
#Similarity Matrix - Must be translated into a sparseMatrix, because it is to heavy to handle
library(SparseM)
library(readr)
library('Matrix')
library(textTinyR)
X<- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
alpha=0.85
max_iter=200
tol=1e-10
n=ncol(X)
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
nozero=which(sumRowS!=0)
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
nozero
i
for(i in nozero){
#(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
#sr=sparse_Sums(sparseMX, rowSums = TRUE)
#dangle<-ifelse(sr==0,1.0/n,0)
print(i)
}
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
#sr=sparse_Sums(sparseMX, rowSums = TRUE)
#dangle<-ifelse(sr==0,1.0/n,0)
print(i)
}
for(i in nozero-1){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
#sr=sparse_Sums(sparseMX, rowSums = TRUE)
#dangle<-ifelse(sr==0,1.0/n,0)
print(i)
}
for(i=0 in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
#sr=sparse_Sums(sparseMX, rowSums = TRUE)
#dangle<-ifelse(sr==0,1.0/n,0)
print(i)
}
for(i=0 in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
#sr=sparse_Sums(sparseMX, rowSums = TRUE)
#dangle<-ifelse(sr==0,1.0/n,0)
print(i)
}
count(nozero)
nozero
#Similarity Matrix
ddarr<-data.matrix(read_csv("~/Master/Europa/Clases Alemania/Thesis/Code/its4land_v20/foo.csv"))
summary(ddarr)
X<- data.matrix(read_csv(system.file("extdata/foo.csv", package = "sstr")))
alpha=0.85
max_iter=200
tol=1e-10
n=ncol(X)
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
nozero=which(sumRowS!=0)
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
print(i)
}
initial_guess=1/n
scores= matrix(1,nrow=n)/n
#dim(scores)
dangleM=matrix(dangle,nrow = n)
dim(dangleM)
for (k in seq(1,max_iter, by=1)){
print(i)
prev_scores = scores
#Here we have the detail, we are calling the sparseMatrix data nxn
#We need all to be numeric
scores = (alpha * ((scores[,])*sparseMX@x + (t(dangleM)%*%(prev_scores)))+ (1 - alpha) * sum(prev_scores) / n)
scores_max =max(abs(scores))
if (scores_max == 0.0){
scores_max = 1.0
}
err = abs(max(matrix(scores)  - prev_scores)) / scores_max
if (err < n * tol){
(scores)
}
}
#Similarity Matrix - Must be translated into a sparseMatrix, because it is to heavy to handle
library(SparseM)
library(readr)
library('Matrix')
library(textTinyR)
X<- data.matrix(read_csv(system.file("extdata/foo.csv", package = "sstr")))
alpha=0.85
max_iter=200
tol=1e-10
n=ncol(X)
#With compression, otherwise will be huge
sparseMX<-as(X,"sparseMatrix")
sumRowS<-sparse_Sums(sparseMX, rowSums = TRUE)
nozero=which(sumRowS!=0)
for(i in nozero){
(sparseMX[i:i+1,]=sparseMX[i:i+1,]*(1/sumRowS[i]))
sr=sparse_Sums(sparseMX, rowSums = TRUE)
dangle<-ifelse(sr==0,1.0/n,0)
}
initial_guess=1/n
scores= matrix(1,nrow=n)/n
#dim(scores)
dangleM=matrix(dangle,nrow = n)
dim(dangleM)
for (k in seq(1,max_iter, by=1)){
print(i)
prev_scores = scores
#Here we have the detail, we are calling the sparseMatrix data nxn
#We need all to be numeric
scores = (alpha * ((scores[,])*sparseMX@x + (t(dangleM)%*%(prev_scores)))+ (1 - alpha) * sum(prev_scores) / n)
scores_max =max(abs(scores))
if (scores_max == 0.0){
scores_max = 1.0
}
err = abs(max(matrix(scores)  - as.vector(prev_scores))) / scores_max
if (err < n * tol){
(scores)
}
}
matrix(scores)
as.vector(prev_scores)
prev_scores
scores
dangle
scores
scores= matrix(1,nrow=n)/n
scores_max
scores
prev_scores
dim(ddarr)
library(sstr)
library(readr)
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
g<-graph_from_adjacency_matrix(sparseMX, mode = "directed")
library(readr)
library('Matrix')
library(textTinyR)
library(igraph)
X<- data.matrix(read_csv(system.file("extdata/foo.csv", package = "sstr")))
g<-graph_from_adjacency_matrix(sparseMX, mode = "directed")
plot(g)
prr<-page_rank(g, algo="power")
prr<-igraph_pagerank(g, algo="power")
prr<-pagerank(g, algo="power")
prr<-page_rank(g, algo="power")
prr<-page.rank(g, algo="power")
prr<-page_rank(g)$vector
prr
prr<-page_rank(g)
prr
prr<-page_rank(g)$vector
class(prr)
dim(prr)
length(prr)
pgm=matrix(prr,nrow=length(prr))
dim(pgm)
library(sstr)
#?simat
(result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
smap_size=41
#?simat
(result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
dataset <- data.matrix(read.csv(system.file("extdata/foo.csv", package = "sstr")))
scoreSimMa <- data.matrix(read_csv(system.file("extdata/scores2.csv", package = "sstr")))
smap_size=41
#?simat
(result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
#?simat
sparseMX<-as(X,"sparseMatrix")
g<-graph_from_adjacency_matrix(sparseMX, mode = "directed")
prr<-page_rank(g)$vector
simat=matrix(prr,nrow=length(prr))
(result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa))
scoreSimMa2=matrix(prr,nrow=length(prr))
(result_object_sstr<-simat(path=dataset,sketch_map_size=smap_size,scoressm=scoreSimMa2))
